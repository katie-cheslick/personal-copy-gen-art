---
title: "personal-copy-gen-art"
author: "Katie Cheslick"
format: html
editor: visual
---

https://github.com/katie-cheslick/personal-copy-gen-art.git


```{r}


# load in packages to make art
library(ggplot2)
library(tibble)


# load in data set 
mpg


# create initial visualization using mpg data set 
mpg |>
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point()


mpg |> # use mpg data set
  ggplot(aes(displ, hwy, colour = drv, size = cyl)) + # create plot using certain columns
  geom_point(show.legend = FALSE) + # make data points and remove legend
  theme_void() + # get rid of gridlines and tickmarks 
  scale_color_brewer() # make colors a gradient


```



```{r}


# create new visualization
mpg |> # use mpg data set
  ggplot(aes(displ, hwy, colour = drv)) + # use certain columns from data set
  geom_point(show.legend = FALSE, size = 4) + # create large points, remove legend
  geom_point(show.legend = FALSE, size = 1, colour = "#222222") + # create smaller black points in same location 
  coord_polar() + # circular plot form rather than standard form
  theme_void() + # remove gridlines and tickmarks 
  scale_color_brewer() # make colors a gradient


```



```{r}


## EXERCISE 

mpg |> # use mpg data set
  ggplot(aes(displ, hwy)) + # use certain columns from data set
  geom_point(show.legend = FALSE, size = 28) + # create large points, remove legend
  geom_point(show.legend = FALSE, size = 3, colour = "blue") + # create smaller black points in same location 
  geom_point(show.legend = FALSE, size = 0.5, colour = "violet") +
  coord_polar() + # circular plot form rather than standard form
  theme_void() # remove gridlines and tickmarks 


```


```{r}


# make uniformly distributed random numbers
set.seed(1) # set code to deteremine the same random numbers, with any seed number value
n <- 50 # set 50 rows 
dat <- tibble( # create tibble output
  x0 = runif(n), # create column that generates noise/random values
  y0 = runif(n), # create column that generates noise/random values
  x1 = x0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below x0
  y1 = y0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below y0
  shade = runif(n), # assign n random values to shade variable
  size = runif(n) # assign n random values to size variable
)

dat


```


```{r}


# use the data above to create visualization
dat |> # use dat data set
  ggplot(aes( # create ggplot
    x = x0, # set x axis
    y = y0, # set y axis
    xend = x1, # create line from x0 to x1
    yend = y1, # create line from y0 to y1
    colour = shade, # color diff points by shade variable
    size = size # adjust size of points by size variable
  )) +
  geom_segment(show.legend = FALSE) + # remove legend for line segments
  coord_polar() + # create radial plotting of points
  scale_y_continuous(expand = c(0, 0)) + # remove extra empty space around plot
  scale_x_continuous(expand = c(0, 0)) + # remove extra empty space around plot
  scale_color_viridis_c() + # set color scheme
  scale_size(range = c(0, 10)) + # set size of points from 0 to 10
  theme_void() # remove graph lines and tickmarks 


```


```{r}


# create function called polar art that can be used multiple times 

polar_art <- function(seed, n, palette) { # create function of seed, n, and palette
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for aesthetics we might want to use in the art
  dat <- tibble( # create tibble output
    x0 = runif(n), # generate random noise
    y0 = runif(n), # generate random noise
    x1 = x0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below x0
    y1 = y0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below y0
    shade = runif(n), # assign n random values to shade variable
    size = runif(n) # assign n random values to size variable
  )
  
  
  # plot segments using polar coordinates and a gradient palette
  
  dat |> # use dat data set
    ggplot(aes( # create ggplot
      x = x0, # set x axis
      y = y0, # set y axis
      xend = x1, # create line from x0 to x1
      yend = y1, # create line from y0 to y1
      colour = shade, # color by shade variable
      size = size # size by size variable 
    )) +
    geom_segment(show.legend = FALSE) + # remove legend for line segments
    coord_polar() + # radial data points
    scale_y_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_x_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_colour_gradientn(colours = palette) + # set gradient color scheme
    scale_size(range = c(0, 10)) + # set size of points from 0 to 10
    theme_void() # remove graph lines and tickmarks 
}


```



```{r}


# use polar art function to create pieces with the same style 

polar_art(seed = 1, n = 500, palette = c("antiquewhite", "orange", "bisque"))
polar_art(seed = 1, n = 500, palette = c("red", "black", "white"))
polar_art(seed = 2, n = 50, palette = c("red", "black", "white"))


```


```{r}


## EXERCISE

# manipulate polar art function to create my own pieces

polar_art(seed = 300, n = 10000, palette = c("dodgerblue", "lightcyan", "lightgreen"))
polar_art(seed = 5000, n = 10000, palette = c("orangered", "darkred", "coral"))
polar_art(seed = 1, n = 10000, palette = c("yellow", "black", "blue"))


```


```{r}


## EXERCISE

# alter polar art function

polar_art <- function(seed, n, palette) { # create function of seed, n, and palette
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for aesthetics we might want to use in the art
  dat <- tibble( # create tibble output
    x0 = runif(n), # generate random noise
    y0 = runif(n), # generate random noise
    x1 = x0 + runif(n, min = 0, max = 0), # create column that generates noise/value slightly above or below x0
    y1 = y0 + runif(n, min = 0, max = 30), # create column that generates noise/value slightly above or below y0
    shade = runif(n), # assign n random values to shade variable
    size = runif(n) # assign n random values to size variable
  )
  
  
  # plot segments using polar coordinates and a gradient palette
  
  dat |> # use dat data set
    ggplot(aes( # create ggplot
      x = x0, # set x axis
      y = y0, # set y axis
      xend = x1, # create line from x0 to x1
      yend = y1, # create line from y0 to y1
      colour = shade, # color by shade variable
      size = size # size by size variable 
    )) +
    geom_segment(show.legend = FALSE) + # remove legend for line segments
    coord_polar() + # radial data points
    scale_y_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_x_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_colour_gradientn(colours = palette) + # set gradient color scheme
    scale_size(range = c(0, 20)) + # set size of points from 0 to 20
    theme_void() # remove graph lines and tickmarks 
}

polar_art(seed = 300, n = 10000, palette = c("dodgerblue", "lightcyan", "lightgreen"))
polar_art(seed = 5000, n = 10000, palette = c("orangered", "darkred", "coral"))
polar_art(seed = 1, n = 10000, palette = c("yellow", "black", "blue"))


```














