---
title: "personal-copy-gen-art"
author: "Katie Cheslick"
format: html
editor: visual
---

https://github.com/katie-cheslick/personal-copy-gen-art.git


```{r}


# load in packages to make art
library(ggplot2)
library(tibble)


# load in data set 
mpg


# create initial visualization using mpg data set 
mpg |>
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point()


mpg |> # use mpg data set
  ggplot(aes(displ, hwy, colour = drv, size = cyl)) + # create plot using certain columns
  geom_point(show.legend = FALSE) + # make data points and remove legend
  theme_void() + # get rid of gridlines and tickmarks 
  scale_color_brewer() # make colors a gradient


```



```{r}


# create new visualization
mpg |> # use mpg data set
  ggplot(aes(displ, hwy, colour = drv)) + # use certain columns from data set
  geom_point(show.legend = FALSE, size = 4) + # create large points, remove legend
  geom_point(show.legend = FALSE, size = 1, colour = "#222222") + # create smaller black points in same location 
  coord_polar() + # circular plot form rather than standard form
  theme_void() + # remove gridlines and tickmarks 
  scale_color_brewer() # make colors a gradient


```



```{r}


## INTRODUCTORY EXERCISE 1

mpg |> # use mpg data set
  ggplot(aes(displ, hwy)) + # use certain columns from data set
  geom_point(show.legend = FALSE, size = 28) + # create large points, remove legend
  geom_point(show.legend = FALSE, size = 3, colour = "blue") + # create smaller black points in same location 
  geom_point(show.legend = FALSE, size = 0.5, colour = "violet") +
  coord_polar() + # circular plot form rather than standard form
  theme_void() # remove gridlines and tickmarks 


```


```{r}


# make uniformly distributed random numbers
set.seed(1) # set code to deteremine the same random numbers, with any seed number value
n <- 50 # set 50 rows 
dat <- tibble( # create tibble output
  x0 = runif(n), # create column that generates noise/random values
  y0 = runif(n), # create column that generates noise/random values
  x1 = x0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below x0
  y1 = y0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below y0
  shade = runif(n), # assign n random values to shade variable
  size = runif(n) # assign n random values to size variable
)

dat


```


```{r}


# use the data above to create visualization
dat |> # use dat data set
  ggplot(aes( # create ggplot
    x = x0, # set x axis
    y = y0, # set y axis
    xend = x1, # create line from x0 to x1
    yend = y1, # create line from y0 to y1
    colour = shade, # color diff points by shade variable
    size = size # adjust size of points by size variable
  )) +
  geom_segment(show.legend = FALSE) + # remove legend for line segments
  coord_polar() + # create radial plotting of points
  scale_y_continuous(expand = c(0, 0)) + # remove extra empty space around plot
  scale_x_continuous(expand = c(0, 0)) + # remove extra empty space around plot
  scale_color_viridis_c() + # set color scheme
  scale_size(range = c(0, 10)) + # set size of points from 0 to 10
  theme_void() # remove graph lines and tickmarks 


```


```{r}


# create function called polar art that can be used multiple times 

polar_art <- function(seed, n, palette) { # create function of seed, n, and palette
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for aesthetics we might want to use in the art
  dat <- tibble( # create tibble output
    x0 = runif(n), # generate random noise
    y0 = runif(n), # generate random noise
    x1 = x0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below x0
    y1 = y0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below y0
    shade = runif(n), # assign n random values to shade variable
    size = runif(n) # assign n random values to size variable
  )
  
  
  # plot segments using polar coordinates and a gradient palette
  
  dat |> # use dat data set
    ggplot(aes( # create ggplot
      x = x0, # set x axis
      y = y0, # set y axis
      xend = x1, # create line from x0 to x1
      yend = y1, # create line from y0 to y1
      colour = shade, # color by shade variable
      size = size # size by size variable 
    )) +
    geom_segment(show.legend = FALSE) + # remove legend for line segments
    coord_polar() + # radial data points
    scale_y_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_x_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_colour_gradientn(colours = palette) + # set gradient color scheme
    scale_size(range = c(0, 10)) + # set size of points from 0 to 10
    theme_void() # remove graph lines and tickmarks 
}


```



```{r}


# use polar art function to create pieces with the same style 

polar_art(seed = 1, n = 500, palette = c("antiquewhite", "orange", "bisque"))
polar_art(seed = 1, n = 500, palette = c("red", "black", "white"))
polar_art(seed = 2, n = 50, palette = c("red", "black", "white"))


```


```{r}


## INTRODUCTORY EXERCISE 2 Part 1

# manipulate polar art function to create my own pieces

polar_art(seed = 300, n = 10000, palette = c("dodgerblue", "lightcyan", "lightgreen"))
polar_art(seed = 5000, n = 10000, palette = c("orangered", "darkred", "coral"))
polar_art(seed = 1, n = 10000, palette = c("yellow", "black", "blue"))


```


```{r}


## INTRODUCTORY EXERCISE 2 Part 2

# alter polar art function

polar_art_02 <- function(seed, n, palette) { # create function of seed, n, and palette
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for aesthetics we might want to use in the art
  dat <- tibble( # create tibble output
    x0 = runif(n), # generate random noise
    y0 = runif(n), # generate random noise
    x1 = x0 + runif(n, min = 0, max = 30), # create swirl appearance of visualization
    y1 = y0 + runif(n, min = 0, max = 0), # less overlapping of line segments
    shade = runif(n), # assign n random values to shade variable
    size = runif(n) # assign n random values to size variable
  )
  
  
  # plot segments using polar coordinates and a gradient palette
  
  dat |> # use dat data set
    ggplot(aes( # create ggplot
      x = x0, # set x axis
      y = y0, # set y axis
      xend = x1, # create line from x0 to x1
      yend = y1, # create line from y0 to y1
      colour = shade, # color by shade variable
      size = size # size by size variable 
    )) +
    geom_segment(show.legend = FALSE) + # remove legend for line segments
    coord_polar() + # radial data points
    scale_y_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_x_continuous(expand = c(0, 0)) + # remove extra space around plot
    scale_colour_gradientn(colours = palette) + # set gradient color scheme
    scale_size(range = c(0, 20)) + # set size of points from 0 to 20
    theme_void() # remove graph lines and tickmarks 
}

# create images using new polar art 2 function
polar_art_02(seed = 300, n = 50, palette = c("dodgerblue", "cyan", "green"))
polar_art_02(seed = 5000, n = 10000, palette = c("orangered", "darkred", "coral"))
polar_art_02(seed = 1, n = 10000, palette = c("yellow", "black", "blue"))


```



```{r}


## learning about colors

# library necessary packages
library(scales)
library(ggthemes)

# create object with 5 colors
pal <- c("#cdb4db", "#ffc8dd", "#ffafcc", "#bde0fe", "#a2d2ff")

# show these 5 colors
show_col(pal)

# create continuous color scale for pal object
palette_fn <- colorRampPalette(pal)

# have 100 colors on the color spectrum
palette_fn(100)

# show the image of the color gradient
image( # create image
  x = matrix(1:100, ncol = 1), # set matrix
  col = palette_fn(100), # set the colors to use
  useRaster = TRUE, 
  axes = FALSE # remove axis
)

#explore color palette from canvas
canva_palettes[[101]]

# show palette 
show_col(canva_palettes[[101]])

# sample a canva palette at random
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

# use sample_canva function for random color palettes
# same configuration but diff color schemes by adjusting sample canva
polar_art(seed = 2, n = 100, palette = sample_canva(seed = 2))
polar_art(seed = 2, n = 100, palette = sample_canva(seed = 3))
polar_art(seed = 2, n = 100, palette = sample_canva(seed = 4))

# use sample_canva function for random color palettes
# diff configuration by adjusting seed but same color schemes
polar_art(seed = 5, n = 100, palette = sample_canva(seed = 1))
polar_art(seed = 6, n = 100, palette = sample_canva(seed = 1))
polar_art(seed = 7, n = 100, palette = sample_canva(seed = 1))



```


```{r}


## INTRODUCTORY EXERCISE 3 Part 1

sample_canva <- function(seed = NULL) { # create function that samples canva palettes at random
  if(!is.null(seed)) set.seed(seed) # allow for reproducibility in random number generation
  sample(ggthemes::canva_palettes, 1)[[1]] # use canva_palettes from ggthemes package
}

# use show_col function to visualize different color scheme outputs

show_col(canva_palettes[[100]]) # change numbers to get different color palettes
show_col(canva_palettes[[99]])
show_col(canva_palettes[[97]])
show_col(canva_palettes[[95]])

## INTRODUCTORY EXERCISE 3 Part 2

## INTRODUCTORY EXERCISE 3 Part 3


```

```{r}


# learning about composition

# create function that generates tibbles with random numbers
sample_data <- function(seed = NULL, n = 100){ # create function 
  if(!is.null(seed)) set.seed(seed) # allow for reproducibility in random number generation
  dat <- tibble( # generate tibble
    x0 = runif(n), # generate random noise column
    y0 = runif(n), # generate random noise column
    x1 = x0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below x0
    y1 = y0 + runif(n, min = -.2, max = .2), # create column that generates noise/value slightly above or below y0
    shade = runif(n), # assign random values to shade variable
    size = runif(n), # assign random values to size variable
    shape = factor(sample(0:22, size = n, replace = TRUE)) # convert random values into a factor
  )
}


# create stylized plot
polar_styled_plot <- function(data = NULL, palette) { 
  ggplot( # use ggplot
    data = data, # specify data set
    mapping = aes(
      x = x0, # set x axis
      y = y0, # set y axis
      xend = x1, # line from x0 to x1
      yend = y1, # line from y0 to y1
      colour = shade, # color according to shade column of data set
      size = size # size according to size column of data set
    )) + 
    coord_polar(clip = "off") + 
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    )
}


# use polar styled plot to take care of set up and change choice of geom to change output

dat <- sample_data(n = 100, seed = 1) 
pal <- sample_canva(seed = 1)

polar_styled_plot(data = dat, palette = pal) + geom_segment()
polar_styled_plot(data = dat, palette = pal) + geom_path()
polar_styled_plot(data = dat, palette = pal) + geom_point()


# use diplyr and create one visualization w multiple data sets

library(dplyr)

dat1 <- sample_data(n = 2000, seed = 123) 
dat2 <- sample_data(n = 100, seed = 456) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)

polar_styled_plot(palette = sample_canva(seed = 7)) + 
  geom_segment(
    data = dat1 |> mutate(size = size * 3)
  ) + 
  geom_segment(
    data = dat2 |> mutate(size = size / 5), 
    lineend = "round", 
    colour = "white"
  ) +
  geom_segment(
    data = dat2 |> mutate(size = size / 40), 
    lineend = "round", 
    colour = "#222222"
  ) +
  geom_point(
    data = dat2 |> mutate(size = size * 2),
    colour = "#222222"
  )


# additional visualization with more symmetry
dat <- sample_data(n = 2000, seed = 123) |> # where seed changes where the lines are
  mutate(y1 = y0, size = size / 2)

polar_styled_plot(palette = sample_canva(seed = 425)) + # where seed changes the color scheme
  geom_segment(data = dat) + 
  geom_segment(data = dat |> mutate(y1 = y1 - .2, y0 = y0 - .2)) +
  geom_segment(data = dat |> mutate(y1 = y1 - .4, y0 = y0 - .4))


# like visulaization above but choppier lines
dat <- sample_data(n = 1000, seed = 1) |>
  mutate(y1 = y0, size = size / 4)

polar_styled_plot(palette = sample_canva(seed = 2)) + 
  geom_segment(data = dat, linetype = "331311") # where line type changes choppiness of lines



```










